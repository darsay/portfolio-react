/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useGraph, useFrame } from '@react-three/fiber';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import * as THREE from 'three';

function MouseLookerCharacter({ animationName = 'idle', ...props })
{
  const group = useRef();

  const character = useGLTF('\${import.meta.env.BASE_URL}models/character_mixamo.glb');
  //const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = character;

  const { animations: idleAnimation } = useFBX('\${import.meta.env.BASE_URL}models/idle_mixamo.fbx');
  const { animations: saluteAnimation } = useFBX('\${import.meta.env.BASE_URL}models/salute.fbx');
  const { animations: clappingAnimation } = useFBX('\${import.meta.env.BASE_URL}models/clapping.fbx');
  const { animations: victoryAnimation } = useFBX('\${import.meta.env.BASE_URL}models/victory.fbx');

  idleAnimation[0].name = 'idle';
  saluteAnimation[0].name = 'salute';
  clappingAnimation[0].name = 'clapping';
  victoryAnimation[0].name = 'victory';

  const { actions } = useAnimations(
    [idleAnimation[0], saluteAnimation[0], clappingAnimation[0], victoryAnimation[0]],
    group,
  );


  const headBoneRef = useRef();

  useEffect(() => {
    if (nodes.Wolf3D_Head001 && nodes.Wolf3D_Head001.skeleton) {
      headBoneRef.current = nodes.Wolf3D_Head001.skeleton.bones[5];
    }

    
    actions["idle"].timeScale = 1;
    actions["idle"].reset().fadeIn(0).play();
    return () => actions[animationName].fadeOut(0.5);
  }, [animationName, nodes]);


    //Animating the head to follow the mouse position
  useFrame(({ pointer , camera }) => {
      if (headBoneRef.current) {
        // Convert mouse position from [-1, 1] range to world coordinates
        const vector = new THREE.Vector3(pointer.x, -pointer.y, 0.5); // Invert Y-axis for correct mouse behavior
        vector.unproject(camera); // Convert to 3D world coordinates

        // Calculate the direction from the head to the mouse position
        const dir = vector.sub(headBoneRef.current.position).normalize();

        // Apply yaw (rotation around the Y-axis) for horizontal movement
        const yaw = Math.atan2(dir.x, dir.z) * 100;

        // Apply pitch (rotation around the X-axis) for vertical movement
        const pitch = Math.atan2(dir.y, Math.sqrt(dir.x * dir.x + dir.z * dir.z)) * 100;

        // Smooth the rotations (optional, for smoother movement)
        headBoneRef.current.rotation.y = THREE.MathUtils.lerp(
          headBoneRef.current.rotation.y,
          yaw,
          0.5 // Adjust for smoother interpolation
        );
        headBoneRef.current.rotation.x = THREE.MathUtils.lerp(
          headBoneRef.current.rotation.x,
          pitch,
          0.5 // Adjust for smoother interpolation
        );; // Vertical rotation

        // Optional: Limit the rotation to prevent unnatural movement
        // For example, to avoid full 360-degree rotation on the X-axis
        headBoneRef.current.rotation.x = Math.max(Math.min(headBoneRef.current.rotation.x, Math.PI / 4), -Math.PI / 4); // Limit vertical look

      }
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <skinnedMesh
        name="EyeLeft001"
        geometry={nodes.EyeLeft001.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft001.skeleton}
        morphTargetDictionary={nodes.EyeLeft001.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft001.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight001"
        geometry={nodes.EyeRight001.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight001.skeleton}
        morphTargetDictionary={nodes.EyeRight001.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight001.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body001.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair001.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair001.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Head001"
        geometry={nodes.Wolf3D_Head001.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head001.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head001.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head001.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom001.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear001.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top001.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top001.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Teeth001"
        geometry={nodes.Wolf3D_Teeth001.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth001.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth001.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth001.morphTargetInfluences}
      />
      <primitive object={nodes.Hips} />
    </group>
  )
}

useGLTF.preload("\${import.meta.env.BASE_URL}models/character.glb")

export default MouseLookerCharacter

