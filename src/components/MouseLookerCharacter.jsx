/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react';
import { useGraph, useFrame } from '@react-three/fiber';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import * as THREE from 'three';

function MouseLookerCharacter({ animationName = 'idle', ...props })
{
  const group = useRef();

  const character = useGLTF(`/models/character_mixamo.glb`);
  const { nodes, materials } = character;

  const { animations: idleAnimation } = useFBX(`/models/idle_mixamo.fbx`);

  
  const smoothPointer = useRef({ x: 0, y: 0 });

  idleAnimation[0].name = 'idle';

  const { actions } = useAnimations(
    [idleAnimation[0],],
    group
  );


  const headBoneRef = useRef();

  useEffect(() => {
    if (nodes.Wolf3D_Head001 && nodes.Wolf3D_Head001.skeleton) {
      headBoneRef.current = nodes.Wolf3D_Head001.skeleton.bones[5];
    }

    
    actions["idle"].timeScale = 1;
    actions["idle"].reset().fadeIn(0).play();
    return () => actions[animationName].fadeOut(0.5);
  }, [animationName, nodes]);


    //Animating the head to follow the mouse position
    useFrame(({ pointer, camera }) => {
      if (!headBoneRef.current) return;
    
      // Lerp the pointer toward the actual one for smoothing
      smoothPointer.current.x = THREE.MathUtils.lerp(smoothPointer.current.x, pointer.x, 0.1);
      smoothPointer.current.y = THREE.MathUtils.lerp(smoothPointer.current.y, pointer.y, 0.1);
    
      const vector = new THREE.Vector3(
        smoothPointer.current.x,
        -smoothPointer.current.y,
        0.5
      ).unproject(camera);
    
      const dir = vector.sub(headBoneRef.current.position).normalize();
    
      const yaw = Math.atan2(dir.x, dir.z) * 100;
      const pitch = Math.atan2(dir.y, Math.sqrt(dir.x ** 2 + dir.z ** 2)) * 100;
    
      headBoneRef.current.rotation.y = THREE.MathUtils.lerp(
        headBoneRef.current.rotation.y,
        yaw,
        0.5
      );
    
      headBoneRef.current.rotation.x = THREE.MathUtils.clamp(
        THREE.MathUtils.lerp(headBoneRef.current.rotation.x, pitch, 0.5),
        -Math.PI / 4,
        Math.PI / 4
      );
    });
    

  return (
    <group {...props} dispose={null} ref={group}>
      <skinnedMesh
        name="EyeLeft001"
        geometry={nodes.EyeLeft001.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft001.skeleton}
        morphTargetDictionary={nodes.EyeLeft001.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft001.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight001"
        geometry={nodes.EyeRight001.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight001.skeleton}
        morphTargetDictionary={nodes.EyeRight001.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight001.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body001.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair001.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair001.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Head001"
        geometry={nodes.Wolf3D_Head001.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head001.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head001.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head001.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom001.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear001.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear001.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top001.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top001.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Teeth001"
        geometry={nodes.Wolf3D_Teeth001.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth001.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth001.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth001.morphTargetInfluences}
      />
      <primitive object={nodes.Hips} />
    </group>
  )
}

useGLTF.preload(`/models/character.glb`)

export default MouseLookerCharacter

